[{"content":"Mysql存储引擎 1.Mysql的体系结构 连接层 服务层 引擎层 存储层 2.存储引擎介绍 存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型 。我们可以在创建表的时候，来指定选择的存储引擎，如果没有指定将自动选择默认的存储引擎(InnoDB)。\n2.1 InnoDB 1).介绍\nInnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5之后，InnoDB是默认的MySQL存储引擎。\n2).特点\n●DML操作遵循ACID模型，支持事务；\n●行级锁，提高并发访问性能；\n●支持外键FOREIGN KEY约束，保证数据的完整性和正确性；\n3).文件\n参数：innodb_file_per_table\nshow variables like \u0026#39;innodb_file_per_table\u0026#39;; 如果该参数开启，代表对于InnoDB引擎的表，每一张表都对应一个ibd文件。，存储该表的表结构（frm-早期的 、sdi-新版的）、数据和索引。\nshow variables like \u0026#39;%datadir%\u0026#39;; 使用上面的命令查看自己表数据存储位置\n4)逻辑存储结构\n表空间: InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以包含多个Segment段。 段:表空间是由各个段组成的，常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。 区:区是表空间的单元结构，每个区的大小为1M。默认情况下， InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页。 页:页是组成区的最小单元，页也是InnoDB存储引擎磁盘管理的最小单元 ，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB存储引擎每次从磁盘申请 4-5个区。 行: InnoDB存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。 2.2 MyISAM（被） 1).介绍\nMyISAM是MySQL早期的默认存储引擎。\n2).特点\n不支持事务，不支持外键\n支持表锁，不支持行锁\n访问速度快\n2.3Memory 1).介绍\nMemory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。\n2).特点\n存放在内存中\nhash索引（默认）\n2.4三种索引的区别 ","permalink":"http://localhost:1313/posts/mysql%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"mysql存储引擎\"\u003e\u003cstrong\u003eMysql存储引擎\u003c/strong\u003e\u003c/h1\u003e\n\u003ch2 id=\"1mysql的体系结构\"\u003e\u003cstrong\u003e1.Mysql的体系结构\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.postimg.cc/MpV3xV4W/screenshot-16.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e连接层\u003c/li\u003e\n\u003cli\u003e服务层\u003c/li\u003e\n\u003cli\u003e引擎层\u003c/li\u003e\n\u003cli\u003e存储层\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"2存储引擎介绍\"\u003e\u003cstrong\u003e2.存储引擎介绍\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。存储引擎是基于表的，而不是基于库的，\u003ccode\u003e所以存储引擎也可被称为表类型\u003c/code\u003e 。我们可以在创建表的时候，来指定选择的存储引擎，如果没有指定将自动选择默认的存储引擎(InnoDB)。\u003c/p\u003e","title":"Mysql存储引擎"},{"content":"事务 事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n使用到的关键字 set autocommit=0; start transaction; commit; rollback; savepoint 断点 commit to 断点 rollback to 断点 事务四大特性 原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败 一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态 隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行 持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据改变就是永久的 并发事务问题 1） 脏读：一个事务读到另一个事务还没有提交的数据\n比如B读取到了A未提交的数据。\n2） 不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称为不可重复读。\n事务A两次读取同一条记录，但是读取到的数据却是不一样的。\n3） 幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据\n不可重复读和幻读的区别\n不可重复读是读取了其他事务更改的数据 -\u0026gt;update 幻读是读取了其他事务新增的数据 -\u0026gt;insert和delete\n事务的隔离级别 为了解决并发事务所引发的问题，在数据库中引入了事务隔离级别。\n数据库事务的隔离级别有4个，由低到高依次为Read uncommitted 、Read committed 、Repeatable read 、Serializable ，这四个级别可以逐个解决脏读 、不可重复读 、幻读 这几类问题。\nMySql默认REPEATABLE_READ\n隔离级别 脏读 不可重复读 幻读 Read uncommitted(读未提交) Y Y Y Read committed(读以提交) N Y Y Repeatable Read(可重复读) N N Y Serializable N N N 查看事务隔离级别 SELECT @@TRANSACTION_ISOLATION; 设置事务隔离级别 SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL { READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE } ","permalink":"http://localhost:1313/posts/mysql%E4%BA%8B%E5%8A%A1/","summary":"\u003ch1 id=\"事务\"\u003e事务\u003c/h1\u003e\n\u003cp\u003e事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\u003c/p\u003e","title":"Mysql事务"},{"content":"Mysql常用函数 聚合函数 函数 功能 count 统计数量 max 最大值 min 最小值 avg 平均值 sum 求和 字符串函数 函数 功能 CONCAT(S1,S2,\u0026hellip;Sn) 字符串拼接，将S1，S2，\u0026hellip; Sn拼接成一个字符串 LOWER(str) 将字符串str全部转为小写 UPPER(str) 将字符串str全部转为大写 LPAD(str,n,pad) 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度 RPAD(str,n,pad) 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度 TRIM(str) 去掉字符串头部和尾部的空格 SUBSTRING(str,start,len) 返回从字符串str从start位置起的len个长度的字符串 数值函数 函数 功能 CEIL(x) 向上取整 FLOOR(x) 向下取整 MOD(x,y) 返回x/y的模 RAND() 返回0~1内的随机数 ROUND(x,y) 求参数x的四舍五入的值，保留y位小数 例题：\n通过数据库的函数，生成一个六位数的随机验证码。\n1 select lpad(round(rand()*1000000,0),6,\u0026#39;0\u0026#39;) 日期函数 函数 功能 CURDATE() 返回当前日期 CURTIME() 返回当前时间 NOW() 返回当前日期和时间 YEAR(date) 获取指定date的年份 MONTH(date) 获取指定date的月份 DAY(date) 获取指定date的日期 DATE_ADD(date, INTERVAL exprtype) 返回一个日期/时间值加上一个时间间隔expr后的时间值 DATEDIFF(date1,date2) 返回起始时间date1 和 结束时间date2之间的天数 例题：\n查询所有员工的入职天数，并根据入职天数倒序排序\n1 select name, datediff(curdate(), entrydate) as \u0026#39;entrydays\u0026#39; from emp order by 2 entrydays desc; 流程函数 函数 功能 IF(value , t , f) 如果value为true，则返回t，否则返回f IFNULL(value1 , value2) 如果value1不为空，返回value1，否则返回value2 CASE WHEN [ val1 ] THEN [res1] \u0026hellip;ELSE [ default ] END 如果val1为true，返回res1，\u0026hellip; 否则返回default默认值 CASE [ expr ] WHEN [ val1 ] THEN[res1] \u0026hellip; ELSE [ default ] END 如果expr的值等于val1，返回res1，\u0026hellip; 否则返回default默认值 ","permalink":"http://localhost:1313/posts/mysql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/","summary":"\u003ch1 id=\"mysql常用函数\"\u003eMysql常用函数\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://i.postimg.cc/cJQ332yQ/screenshot-12.png\" /\u003e\u003cbr\u003e\u003c/p\u003e\n\u003ch2 id=\"聚合函数\"\u003e\u003cstrong\u003e聚合函数\u003c/strong\u003e\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e函数\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e功能\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ecount\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e统计数量\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003emax\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e最大值\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003emin\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e最小值\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eavg\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e平均值\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003esum\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e求和\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"字符串函数\"\u003e\u003cstrong\u003e字符串函数\u003c/strong\u003e\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e函数\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e功能\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCONCAT(S1,S2,\u0026hellip;Sn)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e字符串拼接，将S1，S2，\u0026hellip; Sn拼接成一个字符串\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eLOWER(str)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e将字符串str全部转为小写\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eUPPER(str)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e将字符串str全部转为大写\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eLPAD(str,n,pad)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e左填充，用字符串pad对str的左边进行填充，达到n个字符串长度\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eRPAD(str,n,pad)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e右填充，用字符串pad对str的右边进行填充，达到n个字符串长度\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTRIM(str)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e去掉字符串头部和尾部的空格\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSUBSTRING(str,start,len)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e返回从字符串str从start位置起的len个长度的字符串\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"数值函数\"\u003e\u003cstrong\u003e数值函数\u003c/strong\u003e\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e函数\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e功能\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCEIL(x)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e向上取整\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eFLOOR(x)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e向下取整\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eMOD(x,y)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e返回x/y的模\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eRAND()\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e返回0~1内的随机数\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eROUND(x,y)\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e求参数x的四舍五入的值，保留y位小数\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e例题：\u003cbr\u003e\n通过数据库的函数，生成一个六位数的随机验证码。\u003c/p\u003e","title":"Mysql常用函数"},{"content":"配置硬件加速 使用SDK 管理器安装 1.选择Tools\u0026gt;SDK Manger\n2.点击 SDK Tools 标签页，然后选择 Android Emulator Hypervisor Driver\n3.点击 OK，以下载并安装 Android Emulator Hypervisor Driver。\n4.安装后，返回命令行中使用以下命令，确认驱动程序能正常运行：\n1sc query aehd 如何出现错误先尝试关闭 Hyper-V 禁用Hyper-V 在控制面板中禁用 Hyper-V 1.在dos窗口或者powershell中运行命令\n1control 2.点击程序\n3.点击启用或者关闭Windos功能\n4.展开 Hyper-V，展开 Hyper-V 平台，然后清除“Hyper-V 虚拟机监控程序”复选框。 在PowerShell 中禁用 Hyper-V 1.提升PowerShell 窗口的权限为管理员\n1 sudo 2.运行以下命令\n1Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor 参考文献\n虚拟化应用程序无法与 Hyper-V、Device Guard 和 Credential Guard 协同工作\n","permalink":"http://localhost:1313/posts/stop-hyper-v/","summary":"\u003ch1 id=\"配置硬件加速\"\u003e配置硬件加速\u003c/h1\u003e\n\u003ch2 id=\"使用sdk-管理器安装\"\u003e使用SDK 管理器安装\u003c/h2\u003e\n\u003cp\u003e1.选择Tools\u0026gt;SDK Manger\u003cbr\u003e\n\u003cimg src=\"https://i.postimg.cc/g2zgzhDN/screenshot-9.png\" /\u003e\u003c/p\u003e","title":"Stop Hyper V"},{"content":"java集合简介 一、集合基本的关系结构 Collection 接口的接口 对象的集合（单列集合）\nList 接口：元素按进入先后有序保存，可重复 LinkedList 接口实现类， 链表， 插入删除， 没有同步， 线程不安全 ArrayList 接口实现类， 数组， 随机访问， 没有同步， 线程不安全 Vector 接口实现类 数组， 同步， 线程安全 Stack 是Vector类的实现类 Set 接口： 仅接收一次，不可重复，并做内部排序 HashSet 使用hash表（数组）存储元素 LinkedHashSet 链表维护元素的插入次序 TreeSet 底层实现为二叉树，元素排好序 Map 接口 键值对的集合 （双列集合）\nHashtable 接口实现类， 同步， 线程安全 HashMap 接口实现类 ，没有同步， 线程不安全 LinkedHashMap 双向链表和哈希表实现 WeakHashMap TreeMap 红黑树对所有的key进行排序 IdentifyHashMap 二、Collection接口及方法 2.1 添加 （1）add(E obj)：添加元素对象到当前集合中\n（2）addAll(Collection other)：添加other集合中的所有元素对象到当前集合中，即this = this ∪ other\n2.2 判断 （3）int size()：获取当前集合中实际存储的元素个数\n（4）boolean isEmpty()：判断当前集合是否为空集合\n（5）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素\n（6）boolean containsAll(Collection coll)：判断coll集合中的元素是否在当前集合中都存在。即coll集合是否是当前集合的“子集”\n（7）boolean equals(Object obj)：判断当前集合与obj是否相等\n2.3 删除 （8）void clear()：清空集合元素\n（9） boolean remove(Object obj) ：从当前集合中删除第一个找到的与obj对象equals返回true的元素。\n（10）boolean removeAll(Collection coll)：从当前集合中删除所有与coll集合中相同的元素。即this = this - this ∩ coll （11）boolean retainAll(Collection coll)：从当前集合中删除两个集合中不同的元素，使得当前集合仅保留与coll集合中的元素相同的元素，即当前集合中仅保留两个集合的交集，即this = this ∩ coll；\n2.4其他 （12）Object[] toArray()：返回包含当前集合中所有元素的数组\n（13）hashCode()：获取集合对象的哈希值\n（14）iterator()：返回迭代器对象，用于集合遍历\n三、List集合 3.1 List接口特点 List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。\nJDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。\n3.2 List接口方法 List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。\n插入元素 void add(int index,Object ele); 在哦index位置插入ele元素 boolean add(int index ,Collection eles);从index位置开始将eles中的所有元素添加进来 获取元素 Object get(int inedx);获取指定index位置的元素 List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合 获取元素索引 int indexOf(Object obj):返回obj在集合中首次出现的位置 int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置 删除和替换元素 Object remove(int index):移除指定index位置的元素，并返回此元素 Object set(int index, Object ele):设置指定index位置的元素为ele 3.3 List接口主要实现类：ArrayList ArrayList 是 List 接口的主要实现类 本质上，ArrayList是对象引用的一个”变长”数组 Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合 3.4 List的实现类之二：LinkedList 对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。这是由底层采用链表（双向链表）结构存储数据决定的。 特有方法 void addFirst(Object obj) void addLast(Object obj) Object getFirst() Object getLast() Object removeFirst() Object removeLast() 3.5 List的实现类之三：Vector Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。 在各种List中，最好把ArrayList作为默认选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。 四、Set集合 4.1 Set接口概述 Set接口是Collection的子接口，Set接口相较于Collection接口没有提供额外的方法 Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。 Set集合支持的遍历方式和Collection集合一样：foreach和Iterator。 Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。 4.2 Set主要实现类：HashSet HashSet 是 Set 接口的主要实现类，大多数时候使用 Set 集合时都使用这个实现类。\nHashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存储、查找、删除性能。\nHashSet 具有以下特点：\n不能保证元素的排列顺序 HashSet 不是线程安全的 集合元素可以是 null HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法得到的哈希值相等，并且两个对象的 equals() 方法返回值为true。\n对于存放在Set容器中的对象，对应的类一定要重写hashCode()和equals(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。\nHashSet集合中元素的无序性，不等同于随机性。这里的无序性与元素的添加位置有关。具体来说：我们在添加每一个元素到数组中时，具体的存储位置是由元素的hashCode()调用后返回的hash值决定的。导致在数组中每个元素不是依次紧密存放的，表现出一定的无序性。\n4.3 Set实现类之二：LinkedHashSet LinkedHashSet 是 HashSet 的子类，不允许集合元素重复。\nLinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以添加顺序保存的。\nLinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。\n4.4 Set实现类之三：TreeSet TreeSet 是 SortedSet 接口的实现类，TreeSet 可以按照添加的元素的指定的属性的大小顺序进行遍历。 TreeSet底层使用红黑树结构存储数据 五 Map接口 现实生活与开发中，我们常会看到这样的一类集合：用户ID与账户信息、学生姓名与考试成绩、IP地址与主机名等，这种一一对应的关系，就称作映射。Java提供了专门的集合框架用来存储这种映射关系的对象，即java.util.Map接口。\n5.1 Map接口概述 Map与Collection并列存在。用于保存具有映射关系的数据：key-value\nCollection集合称为单列集合，元素是孤立存在的。 Map集合称为双列集合，元素是成对存在的。 Map 中的 key 和 value 都可以是任何引用类型的数据。但常用String类作为Map的“键”。\nMap接口的常用实现类：HashMap、LinkedHashMap、TreeMap和``Properties。其中，HashMap是 Map 接口使用频率最高`的实现类。\n5.2 Map接口的常用方法 添加、修改操作： Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中 void putAll(Map m):将m中的所有key-value对存放到当前map中 删除操作： Object remove(Object key)：移除指定key的key-value对，并返回value void clear()：清空当前map中的所有数据 元素查询的操作： Object get(Object key)：获取指定key对应的value boolean containsKey(Object key)：是否包含指定的key boolean containsValue(Object value)：是否包含指定的value int size()：返回map中key-value对的个数 boolean isEmpty()：判断当前map是否为空 boolean equals(Object obj)：判断当前map和参数对象obj是否相等 元视图操作的方法： Set keySet()：返回所有key构成的Set集合 Collection values()：返回所有value构成的Collection集合 Set entrySet()：返回所有key-value对构成的Set集合 5.3 Map的主要实现类：HashMap 5.3.1 HashMap概述 HashMap是 Map 接口使用频率最高的实现类。 HashMap是线程不安全的。允许添加 null 键和 null 值。 存储数据采用的哈希表结构，底层使用一维数组+单向链表+红黑树进行key-value数据的存储。与HashSet一样，元素的存取顺序不能保证一致。 HashMap 判断两个key相等的标准是：两个 key 的hashCode值相等，通过 equals() 方法返回 true。 HashMap 判断两个value相等的标准是：两个 value 通过 equals() 方法返回 true。 5.4 Map实现类之二：LinkedHashMap LinkedHashMap 是 HashMap 的子类 存储数据采用的哈希表结构+链表结构，在HashMap存储结构的基础上，使用了一对双向链表来记录添加元素的先后顺序，可以保证遍历元素时，与添加的顺序一致。 通过哈希表结构可以保证键的唯一、不重复，需要键所在类重写hashCode()方法、equals()方法。 5.5 Map实现类之三：TreeMap TreeMap存储 key-value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 key-value 对处于有序状态。 TreeSet底层使用红黑树结构存储数据 TreeMap 的 Key 的排序： 自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException 定制排序：创建 TreeMap 时，构造器传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口 TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。 5.6 Map实现类之四：Hashtable Hashtable是Map接口的古老实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的。 Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构（数组+单向链表），查询速度快。 与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序 Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。 与HashMap不同，Hashtable 不允许使用 null 作为 key 或 value。 5.7 Map实现类之五：Properties Properties 类是 Hashtable 的子类，该对象用于处理属性文件\n由于属性文件里的 key、value 都是字符串类型，所以 Properties 中要求 key 和 value 都是字符串类型\n存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法\n","permalink":"http://localhost:1313/posts/java%E9%9B%86%E5%90%88%E5%A4%8D%E4%B9%A0/","summary":"\u003ch1 id=\"java集合简介\"\u003ejava集合简介\u003c/h1\u003e\n\u003ch2 id=\"一集合基本的关系结构\"\u003e一、集合基本的关系结构\u003c/h2\u003e\n\u003cp\u003eCollection 接口的接口 对象的集合（单列集合）\u003c/p\u003e","title":"Java集合复习"},{"content":"MySQL的基本操作 1、查看所有的数据库\n1show datebases; 2、创建自己的数据库\n1create datebase 数据库名字; 3、使用自己的数据库\n1use 数据库名字; 说明：如果没有使用use语句，后面针对数据库的操作也没有加“数据名”的限定，那么会报“ERROR 1046 (3D000): No database selected”（没有选择数据库） 使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另 一个数据库操作，那么要重新use。\n4、查看某个库的所有表格\n1show tables; #要求前面有use语句 2show tables from 数据库名; 5、创建新的表格\n1create table 表名称( 2字段名 数据类型, 3字段名 数据类型 4); 6、查看一个表的数据\n1select * from 数据库表名称; 7、添加一条记录\n1nsert into 表名称 values(值列表); 8、删除表格\n1drop table 表名称; 11、删除数据库\n1drop database 数据库名; ","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch1 id=\"mysql的基本操作\"\u003eMySQL的基本操作\u003c/h1\u003e\n\u003cp\u003e1、查看所有的数据库\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-mysql\" data-lang=\"mysql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edatebases\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2、创建自己的数据库\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-mysql\" data-lang=\"mysql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"ln\"\u003e1\u003c/span\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edatebase\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e数据库名字\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pr","title":"MySQL的基本操作"},{"content":"","permalink":"http://localhost:1313/java/%E6%B5%8B%E8%AF%95%E7%94%A8/","summary":"","title":"测试"},{"content":"这里就可以写一些关于的相关信息了。gt\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"}]